var searchIndex = {};
searchIndex['sorted-collections'] = {"items":[[0,"","sorted-collections","sorted-collections-rs is a library providing useful extension traits and convenience\nmethods for ordered collections in Rust."],[0,"sortedmap","",""],[6,"SortedMap","sorted-collections::sortedmap","An extension trait for a `Map` whose keys have a defined total ordering.\nThis trait provides convenience methods which take advantage of the map's ordering.\nThe provided methods may be overriden if desired to provide more efficient\nimplementations."],[9,"first","","Returns the first (least) key currently in this map, and its corresponding value,\nand optionally removes it from the map.\nReturns `None` if this map is empty.",0],[9,"last","","Returns the last (greatest) key currently in this map, and its corresponding value,\nand optionally removes it from the map.\nReturns `None` if this map is empty.",0],[9,"head_map","","Returns the key-value pairs of this map whose keys are less than (or equal to,\nif `inclusive` is true) `key`, as a new instance of the same type of map.",0],[9,"sub_map","","Returns the key-value pairs of this map whose keys range from `from_key` to\n`to_key`, as a new instance of the same type of map.",0],[9,"tail_map","","Returns the key-value pairs of this map whose keys are greater than (or equal to,\nif `inclusive` is true) `key`, as a new instance of the same type of map.",0],[10,"ceiling","","Returns the least key greater than or equal to `key`, and its corresponding value.\nReturns `None` if there is no such key.",0],[10,"floor","","Returns the greatest key less than or equal to `key`, and its corresponding value.\nReturns `None` if there is no such key.",0],[10,"higher","","Returns the least key strictly greater than the given key, and its corresponding value.\nReturns `None` if there is no such key.",0],[10,"lower","","Returns the greatest key strictly less than the given key, and its corresponding value.\nReturns `None` if there is no such key.",0],[10,"first","collections::btree::map","",1],[10,"last","","",1],[10,"head_map","","",1],[10,"sub_map","","",1],[10,"tail_map","","",1],[10,"first","std::collections::hash::map","",2],[10,"last","","",2],[10,"head_map","","",2],[10,"sub_map","","",2],[10,"tail_map","","",2],[0,"sortedset","sorted-collections",""],[6,"SortedSet","sorted-collections::sortedset","An extension trait for a `Set` whose elements have a defined total ordering.\nThis trait provides convenience methods which take advantage of the set's ordering.\nThe provided methods may be overridden if desired to provide more efficient\nimplementations."],[9,"first","","Returns the first (least) element currently in this set and optionally removes it\nfrom the set.\nReturns `None` if this set is empty.",3],[9,"last","","Returns the last (greatest) element currently in this set and optionally removes it\nfrom the set.\nReturns `None` if this set is empty.",3],[9,"head_set","","Returns the elements of this set which are less than (or equal to, if `inclusive`\nis true) `elem`, as a new instance of the same type of set.",3],[9,"sub_set","","Returns the elements of this set ranging from `from_elem` to `to_elem`, as\na new instance of the same type of set.",3],[9,"tail_set","","Returns the elements of this set which are greater than (or equal to, if\n`inclusive` is true) `elem`, as a new instance of the same type of set.",3],[10,"ceiling","","Returns the least element in this set greater than or equal to `elem`.\nReturns `None` if there is no such element.",3],[10,"floor","","Returns the greatest element in this set less than or equal to `elem`.\nReturns `None` if there is no such element.",3],[10,"higher","","Returns the least element in this set strictly greater than `elem`.\nReturns `None` if there is no such element.",3],[10,"lower","","Returns the greatest element in this set strictly less than `elem`.\nReturns `None` if there is no such element.",3],[10,"first","collections::btree::set","",4],[10,"last","","",4],[10,"head_set","","",4],[10,"sub_set","","",4],[10,"tail_set","","",4],[10,"first","std::collections::hash::set","",5],[10,"last","","",5],[10,"head_set","","",5],[10,"sub_set","","",5],[10,"tail_set","","",5]],"paths":[[6,"SortedMap"],[1,"BTreeMap"],[1,"HashMap"],[6,"SortedSet"],[1,"BTreeSet"],[1,"HashSet"]]};
initSearch(searchIndex);
