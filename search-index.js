var searchIndex = {};
searchIndex['sorted-collections'] = {"items":[[0,"","sorted-collections","sorted-collections-rs is a library providing useful extension traits and convenience\nmethods for ordered collections in Rust."],[0,"sortedmap","",""],[1,"BTreeMapRange","sorted-collections::sortedmap",""],[1,"BTreeMapRangeMut","",""],[1,"BTreeMapRangeRemove","",""],[1,"HashMapRange","",""],[1,"HashMapRangeMut","",""],[1,"HashMapRangeRemove","",""],[6,"SortedMap","","An extension trait for a `Map` whose keys have a defined total ordering.\nThis trait provides convenience methods which take advantage of the map's ordering.\nThe provided methods may be overriden if desired to provide more efficient\nimplementations."],[17,"Range","sorted-collections::sortedmap::SortedMap",""],[17,"RangeMut","",""],[17,"RangeRemove","",""],[9,"first","sorted-collections::sortedmap","Returns an immutable reference to the first (least) key currently in this map.\nReturns `None` if this map is empty.",0],[9,"first_remove","","Removes and returns the first (least) key currently in this map and its associated value.\nReturns `None` if this map is empty.",0],[9,"last","","Returns an immutable reference to the last (greatest) key currently in this map.\nReturns `None` if this map is empty.",0],[9,"last_remove","","Removes and returns the last (greatest) key currently in this map and its associated value.\nReturns `None` if this map is empty.",0],[9,"ceiling","","Returns an immutable reference to the least key in this map greater than or equal to `key`.\nReturns `None` if there is no such key.",0],[9,"ceiling_remove","","Removes and returns the least key in this map greater than or equal to `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[9,"floor","","Returns an immutable reference to the greatest key in this map less than or equal to `key`.\nReturns `None` if there is no such key.",0],[9,"floor_remove","","Removes and returns the greatest key in this map less than or equal to `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[9,"higher","","Returns an immutable reference to the least key in this map strictly greater than `key`.\nReturns `None` if there is no such key.",0],[9,"higher_remove","","Removes and returns the least key in this map strictly greater than `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[9,"lower","","Returns an immutable reference to the greatest key in this map strictly less than `key`.\nReturns `None` if there is no such key.",0],[9,"lower_remove","","Removes and returns the greatest key in this map strictly less than `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[9,"range","","Returns an iterator over pairs of immutable key-value references into this map,\nwith the pairs being iterated being those whose keys are in the range [from_key, to_key).\nNote that this iterator need not necessarily yield the pairs in ascending order by key!",0],[9,"range_mut","","Returns an iterator over pairs of immutable-key/mutable-value references into this map,\nwith the pairs being iterated being those whose keys are in the range [from_key, to_key).\nNote that this iterator need not necessarily yield the pairs in ascending order by key!",0],[9,"range_remove","","Removes the key-value pairs of this map whose keys lie in the range [from_key, to_key),\nand returns a by-value iterator over the removed pairs.  Note that this iterator need\nnot necessarily yield the values in ascending order by key!",0],[4,"Range","",""],[4,"RangeMut","",""],[4,"RangeRemove","",""],[10,"first","collections::btree::map","",1],[10,"first_remove","","",1],[10,"last","","",1],[10,"last_remove","","",1],[10,"ceiling","","",1],[10,"ceiling_remove","","",1],[10,"floor","","",1],[10,"floor_remove","","",1],[10,"higher","","",1],[10,"higher_remove","","",1],[10,"lower","","",1],[10,"lower_remove","","",1],[10,"range","","",1],[10,"range_mut","","",1],[10,"range_remove","","",1],[4,"Range","sorted-collections::sortedmap",""],[4,"RangeMut","",""],[4,"RangeRemove","",""],[10,"first","std::collections::hash::map","",2],[10,"first_remove","","",2],[10,"last","","",2],[10,"last_remove","","",2],[10,"ceiling","","",2],[10,"ceiling_remove","","",2],[10,"floor","","",2],[10,"floor_remove","","",2],[10,"higher","","",2],[10,"higher_remove","","",2],[10,"lower","","",2],[10,"lower_remove","","",2],[10,"range","","",2],[10,"range_mut","","",2],[10,"range_remove","","",2],[4,"Item","sorted-collections::sortedmap",""],[10,"next","","",3],[4,"Item","",""],[10,"next","","",4],[4,"Item","",""],[10,"next","","",5],[10,"size_hint","","",5],[10,"next_back","","",5],[10,"len","","",5],[4,"Item","",""],[10,"next","","",6],[4,"Item","",""],[10,"next","","",7],[4,"Item","",""],[10,"next","","",8],[10,"size_hint","","",8],[10,"len","","",8],[0,"sortedset","sorted-collections",""],[1,"BTreeSetRange","sorted-collections::sortedset",""],[1,"BTreeSetRangeRemove","",""],[1,"HashSetRange","",""],[1,"HashSetRangeRemove","",""],[6,"SortedSet","","An extension trait for a `Set` whose elements have a defined total ordering.\nThis trait provides convenience methods which take advantage of the set's ordering.\nThe provided methods may be overridden if desired to provide more efficient\nimplementations."],[17,"Range","sorted-collections::sortedset::SortedSet",""],[17,"RangeRemove","",""],[9,"first","sorted-collections::sortedset","Returns an immutable reference to the first (least) element currently in this set.\nReturns `None` if this set is empty.",9],[9,"first_remove","","Removes and returns the first (least) element currently in this set.\nReturns `None` if this set is empty.",9],[9,"last","","Returns an immutable reference to the last (greatest) element currently in this set.\nReturns `None` if this set is empty.",9],[9,"last_remove","","Removes and returns the last (greatest) element currently in this set.\nReturns `None` if this set is empty.",9],[9,"ceiling","","Returns an immutable reference to the least element in this set greater than or equal to `elem`.\nReturns `None` if there is no such element.",9],[9,"ceiling_remove","","Removes and returns the least element in this set greater than or equal to `elem`.\nReturns `None` if there is no such element.",9],[9,"floor","","Returns an immutable reference to the greatest element in this set less than or equal to `elem`.\nReturns `None` if there is no such element.",9],[9,"floor_remove","","Removes and returns the greatest element in this set less than or equal to `elem`.\nReturns `None` if there is no such element.",9],[9,"higher","","Returns an immutable reference to the least element in this set strictly greater than `elem`.\nReturns `None` if there is no such element.",9],[9,"higher_remove","","Removes and returns the least element in this set strictly greater than `elem`.\nReturns `None` if there is no such element.",9],[9,"lower","","Returns an immutable reference to the greatest element in this set strictly less than `elem`.\nreturns `none` if there is no such element.",9],[9,"lower_remove","","Removes and returns the greatest element in this set strictly less than `elem`.\nreturns `none` if there is no such element.",9],[9,"range","","Returns an iterator over immutable references to the elements\nof this set in the range [from_elem, to_elem).  Note that this iterator\nneed not necessarily yield the values in ascending order!",9],[9,"range_remove","","Removes the elements of this set in the range [from_elem, to_elem), and returns\na by-value iterator over the removed elements.  Note that this iterator need not\nnecessarily yield the values in ascending order!",9],[4,"Range","",""],[4,"RangeRemove","",""],[10,"first","collections::btree::set","",10],[10,"first_remove","","",10],[10,"last","","",10],[10,"last_remove","","",10],[10,"ceiling","","",10],[10,"ceiling_remove","","",10],[10,"floor","","",10],[10,"floor_remove","","",10],[10,"higher","","",10],[10,"higher_remove","","",10],[10,"lower","","",10],[10,"lower_remove","","",10],[10,"range","","",10],[10,"range_remove","","",10],[4,"Range","sorted-collections::sortedset",""],[4,"RangeRemove","",""],[10,"first","std::collections::hash::set","",11],[10,"first_remove","","",11],[10,"last","","",11],[10,"last_remove","","",11],[10,"ceiling","","",11],[10,"ceiling_remove","","",11],[10,"floor","","",11],[10,"floor_remove","","",11],[10,"higher","","",11],[10,"higher_remove","","",11],[10,"lower","","",11],[10,"lower_remove","","",11],[10,"range","","",11],[10,"range_remove","","",11],[4,"Item","sorted-collections::sortedset",""],[10,"next","","",12],[4,"Item","",""],[10,"next","","",13],[10,"size_hint","","",13],[10,"next_back","","",13],[10,"len","","",13],[4,"Item","",""],[10,"next","","",14],[4,"Item","",""],[10,"next","","",15],[10,"size_hint","","",15],[10,"len","","",15]],"paths":[[6,"SortedMap"],[1,"BTreeMap"],[1,"HashMap"],[1,"BTreeMapRange"],[1,"BTreeMapRangeMut"],[1,"BTreeMapRangeRemove"],[1,"HashMapRange"],[1,"HashMapRangeMut"],[1,"HashMapRangeRemove"],[6,"SortedSet"],[1,"BTreeSet"],[1,"HashSet"],[1,"BTreeSetRange"],[1,"BTreeSetRangeRemove"],[1,"HashSetRange"],[1,"HashSetRangeRemove"]]};
initSearch(searchIndex);
