var searchIndex = {};
searchIndex['sorted-collections'] = {"items":[[0,"","sorted-collections","sorted-collections-rs is a library providing useful extension traits and convenience\nmethods for ordered collections in Rust."],[0,"sortedmap","",""],[3,"BTreeMapRangeIter","sorted-collections::sortedmap",""],[3,"BTreeMapRangeIterMut","",""],[3,"BTreeMapRangeRemoveIter","",""],[8,"SortedMapExt","","An extension trait for a `Map` whose keys have a defined total ordering.\nThis trait provides convenience methods which take advantage of the map's ordering."],[16,"RangeIter","sorted-collections::sortedmap::SortedMapExt","An iterator over immutable references to the key-value pairs in this map whose keys fall\nwithin a given range."],[16,"RangeIterMut","","An iterator over mutable references to the key-value pairs in this map whose keys fall\nwithin a given range."],[16,"RangeRemoveIter","","A by-value iterator yielding key-value pairs whose keys fall within a given range and\nwhich have just been removed from this map."],[10,"first","sorted-collections::sortedmap","Returns an immutable reference to the first (least) key currently in this map.\nReturns `None` if this map is empty.",0],[10,"first_remove","","Removes and returns the first (least) key currently in this map and its associated value.\nReturns `None` if this map is empty.",0],[10,"last","","Returns an immutable reference to the last (greatest) key currently in this map.\nReturns `None` if this map is empty.",0],[10,"last_remove","","Removes and returns the last (greatest) key currently in this map and its associated value.\nReturns `None` if this map is empty.",0],[10,"ceiling","","Returns an immutable reference to the least key in this map greater than or equal to `key`.\nReturns `None` if there is no such key.",0],[10,"ceiling_remove","","Removes and returns the least key in this map greater than or equal to `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[10,"floor","","Returns an immutable reference to the greatest key in this map less than or equal to `key`.\nReturns `None` if there is no such key.",0],[10,"floor_remove","","Removes and returns the greatest key in this map less than or equal to `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[10,"higher","","Returns an immutable reference to the least key in this map strictly greater than `key`.\nReturns `None` if there is no such key.",0],[10,"higher_remove","","Removes and returns the least key in this map strictly greater than `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[10,"lower","","Returns an immutable reference to the greatest key in this map strictly less than `key`.\nReturns `None` if there is no such key.",0],[10,"lower_remove","","Removes and returns the greatest key in this map strictly less than `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[10,"range_iter","","Returns an iterator over pairs of immutable key-value references into this map,\nwith the pairs being iterated being those whose keys are in the range [from_key, to_key).",0],[10,"range_iter_mut","","Returns an iterator over pairs of immutable-key/mutable-value references into this map,\nwith the pairs being iterated being those whose keys are in the range [from_key, to_key).",0],[10,"range_remove_iter","","Removes the key-value pairs of this map whose keys lie in the range [from_key, to_key),\nand returns a by-value iterator over the removed pairs.",0],[6,"RangeIter","",""],[6,"RangeIterMut","",""],[6,"RangeRemoveIter","",""],[11,"first","collections::btree::map","",1],[11,"first_remove","","",1],[11,"last","","",1],[11,"last_remove","","",1],[11,"ceiling","","",1],[11,"ceiling_remove","","",1],[11,"floor","","",1],[11,"floor_remove","","",1],[11,"higher","","",1],[11,"higher_remove","","",1],[11,"lower","","",1],[11,"lower_remove","","",1],[11,"range_iter","","",1],[11,"range_iter_mut","","",1],[11,"range_remove_iter","","",1],[6,"Item","sorted-collections::sortedmap",""],[11,"next","","",2],[11,"size_hint","","",2],[11,"next_back","","",2],[6,"Item","",""],[11,"next","","",3],[11,"size_hint","","",3],[11,"next_back","","",3],[6,"Item","",""],[11,"next","","",4],[11,"size_hint","","",4],[11,"next_back","","",4],[11,"len","","",4],[0,"sortedset","sorted-collections",""],[3,"BTreeSetRangeIter","sorted-collections::sortedset",""],[3,"BTreeSetRangeRemoveIter","",""],[8,"SortedSetExt","","An extension trait for a `Set` whose elements have a defined total ordering.\nThis trait provides convenience methods which take advantage of the set's ordering."],[16,"RangeIter","sorted-collections::sortedset::SortedSetExt","An iterator over immutable references to this set's elements within a given range."],[16,"RangeRemoveIter","","A by-value iterator yielding elements within a given range which have just been removed\nfrom this set."],[10,"first","sorted-collections::sortedset","Returns an immutable reference to the first (least) element currently in this set.\nReturns `None` if this set is empty.",5],[10,"first_remove","","Removes and returns the first (least) element currently in this set.\nReturns `None` if this set is empty.",5],[10,"last","","Returns an immutable reference to the last (greatest) element currently in this set.\nReturns `None` if this set is empty.",5],[10,"last_remove","","Removes and returns the last (greatest) element currently in this set.\nReturns `None` if this set is empty.",5],[10,"ceiling","","Returns an immutable reference to the least element in this set greater than or equal to `elem`.\nReturns `None` if there is no such element.",5],[10,"ceiling_remove","","Removes and returns the least element in this set greater than or equal to `elem`.\nReturns `None` if there is no such element.",5],[10,"floor","","Returns an immutable reference to the greatest element in this set less than or equal to `elem`.\nReturns `None` if there is no such element.",5],[10,"floor_remove","","Removes and returns the greatest element in this set less than or equal to `elem`.\nReturns `None` if there is no such element.",5],[10,"higher","","Returns an immutable reference to the least element in this set strictly greater than `elem`.\nReturns `None` if there is no such element.",5],[10,"higher_remove","","Removes and returns the least element in this set strictly greater than `elem`.\nReturns `None` if there is no such element.",5],[10,"lower","","Returns an immutable reference to the greatest element in this set strictly less than `elem`.\nReturns `None` if there is no such element.",5],[10,"lower_remove","","Removes and returns the greatest element in this set strictly less than `elem`.\nReturns `None` if there is no such element.",5],[10,"range_iter","","Returns an iterator over immutable references to the elements\nof this set in the range [from_elem, to_elem).",5],[10,"range_remove_iter","","Removes the elements of this set in the range [from_elem, to_elem), and returns\na by-value iterator over the removed elements.",5],[6,"RangeIter","",""],[6,"RangeRemoveIter","",""],[11,"first","collections::btree::set","",6],[11,"first_remove","","",6],[11,"last","","",6],[11,"last_remove","","",6],[11,"ceiling","","",6],[11,"ceiling_remove","","",6],[11,"floor","","",6],[11,"floor_remove","","",6],[11,"higher","","",6],[11,"higher_remove","","",6],[11,"lower","","",6],[11,"lower_remove","","",6],[11,"range_iter","","",6],[11,"range_remove_iter","","",6],[6,"Item","sorted-collections::sortedset",""],[11,"next","","",7],[11,"size_hint","","",7],[11,"next_back","","",7],[6,"Item","",""],[11,"next","","",8],[11,"size_hint","","",8],[11,"next_back","","",8],[11,"len","","",8]],"paths":[[8,"SortedMapExt"],[3,"BTreeMap"],[3,"BTreeMapRangeIter"],[3,"BTreeMapRangeIterMut"],[3,"BTreeMapRangeRemoveIter"],[8,"SortedSetExt"],[3,"BTreeSet"],[3,"BTreeSetRangeIter"],[3,"BTreeSetRangeRemoveIter"]]};
initSearch(searchIndex);
